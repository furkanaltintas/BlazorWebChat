@page "/friends"
@using BlazorWebRtc_Client.Constants
@using BlazorWebRtc_Client.Models.Request
@using BlazorWebRtc_Client.Models.Response
@using BlazorWebRtc_Client.Services.Abstract
@using BlazorWebRtc_Client.Shared
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Http.Connections
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@using Newtonsoft.Json
@inject IUserFriendService userFriendService
@inject IMessageService messageService
@inject ILocalStorageService localeStorageService
@inject HubConnection hubConnection
@inject AuthenticationStateProvider authStateProvider

<style>

    .modal {
        display: flex;
        justify-content: center;
        align-items: flex-start; /* Üstte hizalar */
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        padding-top: 20px; /* Yukarıdan boşluk bırakarak daha iyi görünüm sağlar */
    }

    .modal-content {
        background-color: #fff;
        padding: 20px;
        width: 300px;
        border-radius: 10px;
        text-align: center;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        animation: fadeIn 0.3s ease-in-out;
    }


    .caller-info {
        display: flex;
        align-items: center;
        margin-bottom: 20px;
    }

    .caller-image {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        margin-right: 15px;
    }

    .caller-details h3 {
        margin: 0;
        font-size: 1.2rem;
        color: #333;
    }

    .calling-text {
        color: #555;
        font-size: 1rem;
    }

    .action-buttons {
        display: flex;
        justify-content: space-around;
    }

    .accept-btn,
    .decline-btn {
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1rem;
        transition: background-color 0.3s;
    }

    .accept-btn {
        background-color: #4CAF50;
        color: white;
    }

        .accept-btn:hover {
            background-color: #45A049;
        }

    .decline-btn {
        background-color: #f44336;
        color: white;
    }

        .decline-btn:hover {
            background-color: #d32f2f;
        }



    .video-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.8);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        z-index: 9999;
    }

    .modal-title {
        color: #fff;
        font-size: 24px;
        margin-bottom: 20px;
        text-align: center;
    }

    /* Video Container */
    .video-container {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 20px;
        margin-bottom: 20px;
    }

    .video-element {
        width: 45%;
        height: auto;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        background-color: #000;
    }

    /* Kontrol Elemanları */
    .controls {
        display: flex;
        justify-content: center;
        align-items: center;
        gap: 10px;
        margin-bottom: 20px;
    }

    .peer-input {
        padding: 10px;
        border: none;
        border-radius: 4px;
        width: 250px;
    }

    /* Genel Buton Stili */
    .btn {
        padding: 10px 15px;
        font-size: 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    /* Buton Renkleri */
    .btn-start {
        background-color: #007bff;
        color: #fff;
    }

        .btn-start:hover {
            background-color: #0056b3;
        }

    .btn-end {
        background-color: #28a745;
        color: #fff;
    }

        .btn-end:hover {
            background-color: #218838;
        }

    .btn-close {
        background-color: #dc3545;
        color: #fff;
    }

        .btn-close:hover {
            background-color: #c82333;
        }

    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: Arial, sans-serif;
    }

    header {
        background-color: #007bff;
        padding: 1rem;
        text-align: center;
        color: white;
    }

    .friend-list {
        margin: 2rem;
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .friend-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border: 1px solid #e0e0e0;
        border-radius: 8px;
        transition: box-shadow 0.3s;
    }

        .friend-item:hover {
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        }

    .status {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        margin-right: 10px;
    }

    .online {
        background-color: green;
    }

    .offline {
        background-color: red;
    }

    .btn {
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        padding: 0.5rem 1rem;
        cursor: pointer;
        transition: background-color 0.3s;
    }

        .btn:hover {
            background-color: #0056b3;
        }

    .modal-message-background {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-message {
        background-color: #fff;
        border-radius: 8px;
        padding: 20px;
        max-width: 500px;
        width: 90%;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
        position: relative;
    }

    .modal h3 {
        text-align: center;
        margin-bottom: 10px;
        color: #333;
    }

    ul {
        list-style-type: none;
        padding: 0;
        max-height: 200px;
        overflow-y: auto;
        margin-bottom: 15px;
    }

    .message-item {
        display: flex;
        justify-content: space-between;
        padding: 10px;
        border-bottom: 1px solid #f0f0f0;
    }

    .message-content {
        font-weight: bold;
        color: #555;
    }

    .message-date {
        font-size: 0.9em;
        color: #888;
    }

    .message-input {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    textarea {
        width: 100%;
        border: 1px solid #ddd;
        border-radius: 5px;
        padding: 10px;
        font-size: 1em;
        resize: none;
    }

    .buttons {
        display: flex;
        justify-content: space-between;
    }

    .send-button, .close-button {
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1em;
        transition: background-color 0.3s ease;
    }

    .send-button {
        background-color: #4CAF50;
        color: white;
    }

    .close-button {
        background-color: #f44336;
        color: white;
    }

    .send-button:hover {
        background-color: #45a049;
    }

    .close-button:hover {
        background-color: #e53935;
    }


    .friend-item img {
        border-radius: 50%;
        width: 100px;
        height: 100px;
        margin-bottom: 1rem;
    }

    .message-item-right {
        display: flex;
        justify-content: flex-end;
        padding: 10px;
        background-color: #d1ffd1;
        border-radius: 8px;
        margin: 5px 0;
    }

    .message-item-left {
        display: flex;
        justify-content: flex-start;
        padding: 10px;
        background-color: #f0f0f0;
        border-radius: 8px;
        margin: 5px 0;
    }

</style>

<Header />


<div class="friend-list">
    @foreach (var friend in UserDTOs)
    {
        <div class="friend-item">
            <div>
                <img src="@GetProfilePicture(friend.Profile)" alt="@friend.UserName" />
                <span class="status @(friend.IsOnline ? "online":"offline")">@(friend.IsOnline ? "Online" : "Offline")</span>
                @friend.UserName
            </div>
            <div>
                <button @onclick="()=> OpenMessageModal(friend.UserId.ToString())" class="btn">Send Message</button>
                <button @onclick="()=> StartVideoCall()" class="btn">Call Video</button>
            </div>
        </div>
    }
</div>

@if (IsModalOpen)
{
    <div class="modal-message-background">
        <div class="modal-message">
            <h3>Send Message</h3>
            <ul>
                @foreach (var message in MessageListResponseModels)
                {
                    Boolean isCurrentUser = message.SenderUserId == Guid.Parse(LoggedInUserId);

                    <li class="@(isCurrentUser ? "message-item-right":"message-item-left")">
                        <span class="message-content">@message.MessageContent</span>
                        <span class="message-date">@message.CreateDate</span>
                    </li>
                }
            </ul>
            <div>
                <textarea @bind="MessageContent" rows="5" placeholder="Please typing your message here..."></textarea>
                <br />
                <button @onclick="SendMessage">Send</button>
                <button @onclick="CloseModal">Close</button>
            </div>
        </div>
    </div>
}


@code {

    private Boolean IsModalOpen = false;
    private String MessageContent = string.Empty;
    private List<UserDTOResponseModel> UserDTOs = new();
    private List<String> UserIds = new();
    private Boolean IsOnline = false;
    private List<MessageListResponseModel> MessageListResponseModels = new();
    private String SelectedUserId = String.Empty;
    private String LoggedInUserId = String.Empty;


    protected override async Task OnInitializedAsync()
    {
        UserDTOs = await userFriendService.GetAllFriendsByUser();
        await ConnectionOnSignalR();

        hubConnection.On<String, Boolean>("UserStatusChanged", async (userIds, isOnline) =>
        {
            var authState = await authStateProvider.GetAuthenticationStateAsync();
            LoggedInUserId = authState.User.FindFirst(ClaimTypes.NameIdentifier)!.Value;

            UserDTOs = await userFriendService.GetAllFriendsByUser();

            var desObj = JsonConvert.DeserializeObject<List<String>>(userIds)!;
            var onlineUserIds = new HashSet<Guid>(desObj.Select(Guid.Parse));

            foreach (var friendOnline in UserDTOs)
                friendOnline.IsOnline = onlineUserIds.Contains(friendOnline.UserId);

            StateHasChanged();
        });
    }

    protected void StartVideoCall()
    {
        IsModalOpen = true;
    }

    protected async Task OpenMessageModal(string userId)
    {
        IsModalOpen = true;
        MessageQueryModel messageQueryModel = new();
        messageQueryModel.MessageUserId = userId;
        SelectedUserId = userId;
        MessageListResponseModels = await messageService.GetMessageList(messageQueryModel);
    }

    private void CloseModal()
    {
        IsModalOpen = false;
    }

    private async Task<Boolean> ConnectionOnSignalR()
    {
        try
        {
            var token = await localeStorageService.GetItemAsync<string>
                (BaseConstants.LocalToken);
            if (!string.IsNullOrEmpty(token))
            {
                var authState = await authStateProvider.GetAuthenticationStateAsync();
                var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

                hubConnection = new HubConnectionBuilder().WithUrl($"https://localhost:7090/userhub?userId={userId}", async options =>
                {
                    options.Transports = HttpTransportType.WebSockets | HttpTransportType.LongPolling;
                }).Build();
                await hubConnection.StartAsync();
                return true;
            }

            return false;
        }
        catch (Exception ex)
        {
            throw;
        }
    }


    private async Task SendMessage()
    {
        SendMessageModel sendMessageModel = new()
            {
                MessageContent = MessageContent,
                ReceiverUserId = SelectedUserId
            };

        Boolean result = await messageService.SendMessage(sendMessageModel);

        MessageContent = String.Empty;
        if (result) await OpenMessageModal(SelectedUserId);

        hubConnection.On<String, Boolean>("ReceiveMessage", async (MessagesContent) =>
        {
            UserDTOs = await userFriendService.GetAllFriendsByUser();

            var desObj = JsonConvert.DeserializeObject<List<MessageListResponseModel>>(MessagesContent);
            MessageListResponseModels = desObj;

            StateHasChanged();
        });
    }

    private string GetProfilePicture(string profilePicturePath) => $"https://localhost:7090/{profilePicturePath}";
}
