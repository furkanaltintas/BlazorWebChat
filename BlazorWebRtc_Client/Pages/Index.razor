@page "/"
@using BlazorWebRtc_Client.Models.Request
@using BlazorWebRtc_Client.Models.Response
@using BlazorWebRtc_Client.Services.Abstract
@using BlazorWebRtc_Client.Shared
@using Microsoft.AspNetCore.Components.Authorization
@inject IUserInfoService userInfoService
@inject AuthenticationStateProvider authenticationStateProvider
@inject IRequestService requestService
@inject IJSRuntime JS

<Header />

<section class="banner">
    <h1>Welcome to Friendship App</h1>
    <button>Find New Friends</button>
</section>

<section class="suggested-friends">
    <h2>Suggested Friends</h2>
    @foreach (var friend in userDTOResponseModels)
    {
        <div class="friend-card">
            <img src="@GetProfilePicture(friend.Profile)" alt="@friend.UserName" />
            <h3>@friend.UserName</h3>
            <p>@friend.Email</p>
            <button @onclick="()=> OpenModal(friend)" class="btn-success">Detail</button>
        </div>
    }

    @if(isModalVisible)
    {
        <div class="modal-overlay">
            <div class="modal-content">
                <h2>@selectedDTO.UserName</h2>
                <img src="@GetProfilePicture(selectedDTO.Profile)" alt="@selectedDTO.UserName" />
                <p>More details about @selectedDTO.UserName</p>
                <button @onclick="CloseModal" class="btn-danger">Close Modal</button>
                <button @onclick="SendRequest" class="btn-success">Request Friend</button>
            </div>
        </div>
    }
</section>

<style>
    body {
    background-color: #f0f8ff;
    font-family: sans-serif;
    color: #333;
    }

    .banner {
    text-align: center;
    background: url('https://www.infosys.com/content/dam/infosys-web/en/australia/digital-accessibility-journey/images/people-holding-speech-bubbles.png') no-repeat center center;
    background-size: cover;
    padding: 4rem 0;
    color: white;
    }

    .banner h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    }

    .banner button {
    background-color: #28a745;
    color: white;
    border: none;
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    cursor: pointer;
    border-radius: 5px;
    }

    .banner button:hover {
    background-color: #218838;
    }

    .suggested-friends {
    padding: 2rem;
    text-align: center;
    }

    .suggested-friends h2 {
    font-size: 2rem;
    margin-bottom: 2rem;
    }

    .friend-card {
    display: inline-block;
    width: 200px;
    background-color: white;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    margin: 1rem;
    padding: 1rem;
    text-align: center;
    }

    .friend-card img {
    border-radius: 50%;
    width: 100px;
    height: 100px;
    margin-bottom: 1rem;
    }

    .friend-card h3 {
    font-size: 1.25rem;
    margin-bottom: 0.5rem;
    }

    .friend-card p {
    font-size: 0.9rem;
    color: #666;
    }

    .btn-success {
    background-color: #28a745;
    color: #fff;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    }

    .btn-success:hover {
    background-color: #218838;
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    }

    .btn-danger {
    background-color: #dc3545;
    color: white;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    }

    .btn-danger:hover {
    background-color: #c82333;
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    }

    .btn-warning {
    background-color: #FFFF00;
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
    }

    .btn-warning:hover {
    background-color: #FFFF00;
    box-shadow: 0 4px 12px rgba(0,0,0,0.2);
    }

    .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    }

    .modal-content {
    background-color: white;
    padding: 20px;
    border-radius: 10px;
    max-width: 500px;
    width: 100%;
    text-align: center;
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
    }

    .modal-content img {
    width: 100px;
    height: 100px;
    border-radius: 50%;
    margin-bottom: 15px;
    }

    .modal-content h2 {
    margin-bottom: 15px;
    }

    .modal-content p {
    margin-bottom: 20px;
    }
</style>

@code {
    List<UserDTOResponseModel> userDTOResponseModels = new();
    UserDTOResponseModel selectedDTO = new();

    private Boolean isModalVisible = false;

    protected override async Task OnInitializedAsync() // Bu sayfa ilk açıldığında burası tetiklenir
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity!.IsAuthenticated) userDTOResponseModels = await userInfoService.GetAllUsersAsync();
    }

    private async Task SendRequest()
    {
        RequestFriendShipCommand requestFriendShipCommand = new(selectedDTO.UserId, StatusEnum.Pending);

        ResponseModel result = await requestService.SendFriendshipRequest(requestFriendShipCommand);
        if(result.IsSuccess)
        {
            await JS.InvokeVoidAsync("toastrNotify", "success", "Friendship request sended", "Success Process");
            CloseModal();
        }
        else
        {
            await JS.InvokeVoidAsync("toastrNotify", "error", result.Message, "Error!!!");
        }
    }

    private void OpenModal(UserDTOResponseModel dto)
    {
        selectedDTO = dto;
        isModalVisible = true;
    }

    private void CloseModal()
    {
        isModalVisible = false;
    }

    private string GetProfilePicture(string profilePicturePath) => $"https://localhost:7090/{profilePicturePath}";
}