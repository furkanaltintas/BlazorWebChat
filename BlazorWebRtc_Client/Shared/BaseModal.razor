@using BlazorWebRtc_Client.Models.Request
@using BlazorWebRtc_Client.Services.Abstract
@inject IRequestService requestService
@inject IJSRuntime JS

@if (IsOpen)
{
    <div class="modal-background">
        <div class="modal">
            <h3>Friendship Requests</h3>
            <ul>
                @foreach (var request in Requests)
                {
                    <li>
                        @request.UserName
                        <button @onclick="()=>SendRequest(StatusEnum.Accept, request.Id)" class="btn btn-success">Accept</button>
                        <button @onclick="()=>SendRequest(StatusEnum.Denied, request.Id)" class="btn btn-danger">Reject</button>
                    </li>
                }
            </ul>
            <button @onclick="CloseModal">Close</button>
        </div>
    </div>
}

<style>
    .modal-background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000;
    }

    .modal {
    background: white;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
    max-width: 500px;
    width: 90%;
    animation: slide-in 0.3s ease;
    }

    h3 {
    margin-bottom: 1rem;
    color: #007bff;
    text-align: center;
    }

    ul {
    list-style-type: none;
    padding: 0;
    margin: 0;
    }

    li {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 0;
    border-bottom: 1px solid #e0e0e0;
    }

    .btn-success {
    background-color: #28a745;
    color: #fff;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    transition: ease
    }

    .btn-warning {
    background-color: #2878a7;
    color: #fff;
    border: none;
    padding: 10px 20px;
    cursor: pointer;
    transition: ease
    }

    button {
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 5px;
    padding: 0.5rem 1rem;
    cursor: pointer;
    transition: background-color 0.3s;
    margin-top: 10px;
    }
    button:hover {
    background-color: #0056b3;
    }
    button.close {
    background-color: #dc3545;
    }
    button.close:hover {
    background-color: #c82333;
    }
</style>


@code {
    [Parameter] public Boolean IsOpen { get; set; }
    [Parameter] public EventCallback<Boolean> IsOpenChanged { get; set; }
    [Parameter] public List<GetRequestFriendshipList> Requests { get; set; } = new();
    [Parameter] public EventCallback RefreshRequestList { get; set; }

    private async Task CloseModal()
    {
        IsOpen = false;
        await IsOpenChanged.InvokeAsync(IsOpen);
    }

    private async Task SendRequest(StatusEnum status, Guid requestId)
    {
        UpdateRequestCommand updateRequestCommand = new()
        {
            RequestId = requestId,
            Status = status
        };

        var result = await requestService.UpdateRequest(updateRequestCommand);
        String messageText = status == StatusEnum.Accept ? "Friendship request accepted" : "Friendship request denied";
        String statusText = status == StatusEnum.Accept ? "success" : "error";

        await this.CloseModal();
        await RefreshRequestList.InvokeAsync();
        await JS.InvokeVoidAsync("toastrNotify", statusText, messageText, "Success Process");
    }
}
